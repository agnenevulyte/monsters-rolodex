{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/searchbox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","alt","src","id","name","CardList","monsters","map","eachMonster","key","SearchBox","placeholder","handleChange","type","onChange","App","fetchUsers","fetch","then","response","json","users","setState","e","preventDefault","searchField","target","value","console","log","state","handleClick","string","myString","this","filteredMonsters","filter","toLowerCase","includes","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+VAGe,SAASA,EAAT,GAA0B,IAAXC,EAAU,EAAVA,QAE5B,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAQI,GAAlC,cACrB,4BAAKJ,EAAQK,MACb,6CCLS,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,SAChC,OACE,yBAAKN,UAAU,aACZM,EAASC,KAAI,SAACC,GAAD,OACZ,kBAACV,EAAD,CAAMW,IAAKD,EAAYL,GAAIJ,QAASS,Q,MCL7B,SAASE,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC9C,OACE,6BACE,2BACEC,KAAK,SACLF,YAAaA,EACbG,SAAUF,EACVZ,UAAU,Y,ICLGe,E,kDACnB,aAAe,IAAD,8BACZ,gBAWFC,WAAa,WACXC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAChB,SAAUe,QAhBjB,EAoBdT,aAAe,SAACW,GACdA,EAAEC,iBACF,EAAKF,SACH,CACEG,YAAaF,EAAEG,OAAOC,QAExB,kBAAMC,QAAQC,IAAI,EAAKC,WA1Bb,EA8BdC,YAAc,SAACR,GACbA,EAAEC,iBACF,EAAKF,SAAS,CACZU,OAAQ,gBA/BV,EAAKF,MAAQ,CACXxB,SAAU,GACV2B,SAAU,sBACVR,YAAa,IALH,E,gEASZS,KAAKlB,e,+BA4BG,IAAD,EACmCkB,KAAKJ,MAAxCxB,EADA,EACAA,SAAUmB,EADV,EACUA,YAAaQ,EADvB,EACuBA,SAExBE,EAAmB7B,EAAS8B,QAAO,SAACrC,GAAD,OACvCA,EAAQK,KAAKiC,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAKrC,UAAU,OACb,gDACA,kBAACU,EAAD,CACEC,YAAY,kBACZC,aAAcsB,KAAKtB,eAErB,kBAACP,EAAD,CAAUC,SAAU6B,IACpB,2BAAIF,GACJ,4BAAQM,QAASL,KAAKH,aAAtB,oB,GAtDyBS,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2745b6ee.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nexport default function Card({monster}) {\n  // console.log(monstaser);\n  return (\n    <div className=\"card\">\n      <img alt=\"monter\" src={`https://robohash.org/${monster.id}set=set2`} />\n      <h1>{monster.name}</h1>\n      <p>monster.email</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './cardList.css';\nimport Card from '../card/Card';\n\nexport default function CardList({monsters}) {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((eachMonster) => (\n        <Card key={eachMonster.id} monster={eachMonster} />\n        // <h1 key={eachMonster.id}>{eachMonster.name}</h1>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport './searchBox.css';\n\nexport default function SearchBox({placeholder, handleChange}) {\n  return (\n    <div>\n      <input\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n        className=\"search\"\n      />\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/CardList';\nimport SearchBox from './components/searchbox/SearchBox';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      myString: 'Hello Anonymous....',\n      searchField: '',\n    };\n  }\n  componentDidMount() {\n    this.fetchUsers();\n  }\n\n  fetchUsers = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({monsters: users});\n      });\n  };\n\n  handleChange = (e) => {\n    e.preventDefault();\n    this.setState(\n      {\n        searchField: e.target.value,\n      },\n      () => console.log(this.state)\n    );\n  };\n\n  handleClick = (e) => {\n    e.preventDefault();\n    this.setState({\n      string: 'Hello Leo!',\n    });\n  };\n\n  render() {\n    const {monsters, searchField, myString} = this.state;\n    // filters monsters in search box\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n        <p>{myString}</p>\n        <button onClick={this.handleClick}>Change name</button>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}